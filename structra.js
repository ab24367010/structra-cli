#!/usr/bin/env node

import inquirer from 'inquirer';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import { fileURLToPath } from 'url';
import os from 'os';
import tree from 'tree-node-cli';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const configPath = path.join(os.homedir(), '.structra-config.json');

console.log(chalk.cyan.bold('\nüöÄ Welcome to Structra CLI v1.1\n'));

function saveConfig(config) {
  try {
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  } catch (err) {
    console.log(chalk.red('‚ö†Ô∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.'));
  }
}

function loadConfig() {
  try {
    if (fs.existsSync(configPath)) {
      return JSON.parse(fs.readFileSync(configPath, 'utf-8'));
    }
  } catch (err) {
    console.log(chalk.red('‚ö†Ô∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ —É–Ω—à–∏—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.'));
  }
  return {};
}

async function main() {
  const userConfig = loadConfig();

  const { projectPath } = await inquirer.prompt({
    type: 'input',
    name: 'projectPath',
    message: 'üìÅ –•–∞–∞–Ω–∞ —Ç”©—Å”©–ª “Ø“Ø—Å–≥—ç—Ö –≤—ç? (path)',
    default: userConfig.lastPath || process.cwd()
  });

  const { projectName } = await inquirer.prompt({
    type: 'input',
    name: 'projectName',
    message: 'üìù –¢”©—Å–ª–∏–π–Ω –Ω—ç—Ä:'
  });

  const fullPath = path.join(projectPath, projectName);

  try {
    if (!fs.existsSync(fullPath)) {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(chalk.green(`\n‚úÖ –¢”©—Å”©–ª “Ø“Ø—Å–≥—ç–ª—ç—ç: ${fullPath}\n`));
    } else {
      console.log(chalk.red('\n‚ùå –¢”©—Å–ª–∏–π–Ω —Ñ–æ–ª–¥–µ—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω –±–∞–π–Ω–∞.\n'));
      return;
    }
  } catch (err) {
    console.log(chalk.red(`\n‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ${err.message}\n`));
    return;
  }

  const { wantsIndex } = await inquirer.prompt({
    type: 'confirm',
    name: 'wantsIndex',
    message: 'üìÑ index.html “Ø“Ø—Å–≥—ç—Ö “Ø“Ø?',
    default: true
  });

  if (wantsIndex) {
    fs.writeFileSync(path.join(fullPath, 'index.html'), '<!-- Welcome to Structra -->');
    console.log(chalk.yellow('üóé index.html “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç'));
  }

  // README.md –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä “Ø“Ø—Å–≥—ç—Ö
  fs.writeFileSync(path.join(fullPath, 'README.md'), `# ${projectName}\n\n–≠–Ω—ç —Ç”©—Å–ª–∏–π–≥ Structra CLI –∞—à–∏–≥–ª–∞–Ω “Ø“Ø—Å–≥—ç—Å—ç–Ω.`);
  console.log(chalk.yellow('üóé README.md “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç'));

  // –•–∞–º–≥–∏–π–Ω —Å“Ø“Ø–ª–∏–π–Ω –∑–∞–º—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
  saveConfig({ lastPath: projectPath });

  await askToAddFileOrFolder(fullPath);

  console.log(chalk.cyan('\nüìÇ –¢”©—Å–ª–∏–π–Ω –±“Ø—Ç—ç—Ü:'));
  console.log(tree(fullPath));
}

async function askToAddFileOrFolder(currentPath) {
  while (true) {
    const { choice } = await inquirer.prompt({
      type: 'list',
      name: 'choice',
      message: `üìå ${currentPath} –¥–æ—Ç–æ—Ä —é—É “Ø“Ø—Å–≥—ç—Ö –≤—ç?`,
      choices: ['üìÅ Folder', 'üìÑ File', 'üëÅ Preview', '‚úÖ –î—É—É—Å–≥–∞—Ö']
    });

    if (choice === '‚úÖ –î—É—É—Å–≥–∞—Ö') break;

    if (choice === 'üëÅ Preview') {
      console.log(chalk.blue('\nüß≠ –ë“Ø—Ç—ç—Ü Preview:'));
      console.log(tree(currentPath));
      continue;
    }

    const { names } = await inquirer.prompt({
      type: 'input',
      name: 'names',
      message: `${choice === 'üìÅ Folder' ? '–§–æ–ª–¥–µ—Ä—É—É–¥' : '–§–∞–π–ª(—É—É–¥)'} –Ω—ç—Ä (–∫–æ–º–∞–≥–∞–∞—Ä —Ç—É—Å–≥–∞–∞—Ä–ª–∞–Ω –±–∏—á):`
    });

    const nameList = names.split(',').map(n => n.trim()).filter(n => n);

    for (const name of nameList) {
      const targetPath = path.join(currentPath, name);
      try {
        if (choice === 'üìÅ Folder') {
          fs.mkdirSync(targetPath);
          console.log(chalk.green(`‚úÖ –§–æ–ª–¥–µ—Ä “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç: ${name}`));
        } else {
          fs.writeFileSync(targetPath, '');
          console.log(chalk.green(`‚úÖ –§–∞–π–ª “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç: ${name}`));
        }
      } catch (err) {
        console.log(chalk.red(`‚ùå –ê–ª–¥–∞–∞ (${name}): ${err.message}`));
      }
    }

    if (choice === 'üìÅ Folder' && nameList.length === 1) {
      const { inside } = await inquirer.prompt({
        type: 'list',
        name: 'inside',
        message: '‚û°Ô∏è –≠–Ω—ç —Ñ–æ–ª–¥–µ—Ä —Ä—É—É –æ—Ä–æ—Ö —É—É?',
        choices: ['üîΩ –û—Ä–æ—Ö', 'üîº “Æ—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö']
      });
      if (inside === 'üîΩ –û—Ä–æ—Ö') {
        await askToAddFileOrFolder(path.join(currentPath, nameList[0]));
      }
    }
  }
}

main();
