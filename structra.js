#!/usr/bin/env node

import inquirer from 'inquirer';
import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import { fileURLToPath } from 'url';
import os from 'os';
import tree from 'tree-node-cli';
// package.json-–≥ import assertion –∞—à–∏–≥–ª–∞–Ω —É–Ω—à–∏—Ö (Node.js v16.14+ —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π)
import pkg from './package.json' assert { type: 'json' };

const configPath = path.join(os.homedir(), '.structra-config.json');

// –ê–ª–¥–∞–∞–≥ –Ω—ç–≥–¥—Å—ç–Ω –±–∞–π–¥–ª–∞–∞—Ä –±–∞—Ä–∏—Ö —Ñ—É–Ω–∫—Ü
const handleError = (err) => {
  console.error(chalk.red(`\n‚ùå –£—É—á–ª–∞–∞—Ä–∞–π, –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ${err.message}`));
  process.exit(1);
};

// –ë–∞—Ä–∏–≥–¥–∞–∞–≥“Ø–π promise rejection-–≥ —ç–Ω–¥ –±–∞—Ä–∏–Ω–∞
process.on('unhandledRejection', handleError);

function saveConfig(config) {
  try {
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
  } catch (err) {
    console.log(chalk.yellow('‚ö†Ô∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.'));
  }
}

function loadConfig() {
  try {
    if (fs.existsSync(configPath)) {
      return JSON.parse(fs.readFileSync(configPath, 'utf-8'));
    }
  } catch (err) {
    console.log(chalk.yellow('‚ö†Ô∏è –¢–æ—Ö–∏—Ä–≥–æ–æ–≥ —É–Ω—à–∏—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.'));
  }
  return {};
}

async function askToAddFileOrFolder(currentPath) {
  while (true) {
    console.log(chalk.blue.bold('\n–¢”©—Å–ª–∏–π–Ω –æ–¥–æ–æ–≥–∏–π–Ω –±“Ø—Ç—ç—Ü:'));
    const currentTree = tree(currentPath, { allFiles: true, maxDepth: 4 });
    console.log(currentTree || chalk.yellow('–•–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.'));

    const { choice } = await inquirer.prompt({
      type: 'list',
      name: 'choice',
      message: '‚û°Ô∏è –Æ—É –Ω—ç–º—ç—Ö –≤—ç?',
      choices: ['üìÅ –§–æ–ª–¥–µ—Ä', 'üìÑ –§–∞–π–ª', new inquirer.Separator(), '‚úÖ –ë“Ø—Ç—ç—Ü “Ø“Ø—Å–≥—ç–∂ –¥—É—É—Å–≥–∞—Ö'],
    });

    if (choice === '‚úÖ –ë“Ø—Ç—ç—Ü “Ø“Ø—Å–≥—ç–∂ –¥—É—É—Å–≥–∞—Ö') {
      break;
    }

    const { name } = await inquirer.prompt({
      type: 'input',
      name: 'name',
      message: `"${choice}" –Ω—ç—Ä (–æ–ª–æ–Ω –±–æ–ª –∑–∞–π–≥–∞–∞—Ä —Ç—É—Å–≥–∞–∞—Ä–ª–∞):`,
      validate: function (input) {
        if (!input.trim()) {
            return '–ù—ç—Ä —Ö–æ–æ—Å–æ–Ω –±–∞–π–∂ –±–æ–ª–æ—Ö–≥“Ø–π.';
        }
        // –§–∞–π–ª –±–æ–ª–æ–Ω —Ñ–æ–ª–¥–µ—Ä—ã–Ω –Ω—ç—Ä—ç–Ω–¥ –∞—à–∏–≥–ª–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π —Ç—ç–º–¥—ç–≥—Ç“Ø“Ø–¥–∏–π–≥ —à–∞–ª–≥–∞—Ö
        if (/[<>:"/\\|?*]/g.test(input)) {
            return '–§–∞–π–ª/—Ñ–æ–ª–¥–µ—Ä—ã–Ω –Ω—ç—Ä—ç–Ω–¥ < > : " / \\ | ? * —Ç—ç–º–¥—ç–≥—Ç“Ø“Ø–¥–∏–π–≥ –∞—à–∏–≥–ª–∞—Ö –±–æ–ª–æ—Ö–≥“Ø–π.';
        }
        return true;
      }
    });

    const nameList = name.split(' ').filter(n => n);

    for (const singleName of nameList) {
      const targetPath = path.join(currentPath, singleName);

      try {
        if (fs.existsSync(targetPath)) {
          console.log(chalk.yellow(`‚ö†Ô∏è "${singleName}" –Ω—ç—Ä—Ç—ç–π —Ñ–∞–π–ª/—Ñ–æ–ª–¥–µ—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω –±–∞–π–Ω–∞.`));
          continue;
        }

        if (choice === 'üìÅ –§–æ–ª–¥–µ—Ä') {
          fs.mkdirSync(targetPath);
          console.log(chalk.green(`‚úÖ –§–æ–ª–¥–µ—Ä “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç: ${singleName}`));
        } else {
          fs.writeFileSync(targetPath, '');
          console.log(chalk.green(`‚úÖ –§–∞–π–ª “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç: ${singleName}`));
        }
      } catch (err) {
        console.log(chalk.red(`‚ùå –ê–ª–¥–∞–∞ (${singleName}): ${err.message}`));
      }
    }

    if (choice === 'üìÅ –§–æ–ª–¥–µ—Ä' && nameList.length === 1) {
      const { inside } = await inquirer.prompt({
        type: 'list',
        name: 'inside',
        message: `‚û°Ô∏è "${nameList[0]}" —Ñ–æ–ª–¥–µ—Ä —Ä—É—É –æ—Ä–∂, –¥–æ—Ç–æ—Ä –Ω—å “Ø“Ø—Å–≥—ç—Ö “Ø“Ø?`,
        choices: ['üîΩ –¢–∏–π–º, –æ—Ä—ä—ë', 'üîº “Æ–≥“Ø–π, “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—å–µ']
      });
      if (inside === 'üîΩ –¢–∏–π–º, –æ—Ä—ä—ë') {
        await askToAddFileOrFolder(path.join(currentPath, nameList[0]));
      }
    }
  }
}

async function main() {
  const args = process.argv.slice(2);
  if (args.includes('--version') || args.includes('-v')) {
    console.log(`Structra CLI v${pkg.version}`);
    process.exit(0);
  }
  
  // Uninstall –ª–æ–≥–∏–∫–∏–π–≥ —Ö–∞—Å—Å–∞–Ω.

  console.log(chalk.cyan.bold(`\nüöÄ Structra CLI v${pkg.version}-–¥ —Ç–∞–≤—Ç–∞–π –º–æ—Ä–∏–ª!\n`));
  
  const userConfig = loadConfig();

  const { projectPath } = await inquirer.prompt({
    type: 'input',
    name: 'projectPath',
    message: 'üìÅ –¢”©—Å–ª–∏–π–≥ —Ö–∞–∞–Ω–∞ “Ø“Ø—Å–≥—ç—Ö –≤—ç? (–∑–∞–º)',
    default: userConfig.lastPath || os.homedir(),
  });

  if (!fs.existsSync(projectPath)) {
    console.log(chalk.yellow('üìÇ –£–≥ –∑–∞–º–¥ —Ö–∞–≤—Ç–∞—Å –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –®–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...'));
    try {
      fs.mkdirSync(projectPath, { recursive: true });
      console.log(chalk.green('‚úÖ –•–∞–≤—Ç–∞—Å –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–ª—ç—ç.'));
    } catch (err) {
        handleError(new Error(`–•–∞–≤—Ç–∞—Å “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ${err.message}`));
    }
  }

  userConfig.lastPath = projectPath;
  saveConfig(userConfig);

  const { projectName } = await inquirer.prompt({
    type: 'input',
    name: 'projectName',
    message: 'üìù –¢”©—Å–ª–∏–π–Ω –Ω—ç—Ä–∏–π–≥ –æ—Ä—É—É–ª–Ω–∞ —É—É:',
    default: 'my-new-project',
    validate: (input) => input.trim() ? true : '–¢”©—Å–ª–∏–π–Ω –Ω—ç—Ä —Ö–æ–æ—Å–æ–Ω –±–∞–π–∂ –±–æ–ª–æ—Ö–≥“Ø–π.'
  });

  const projectFullPath = path.join(projectPath, projectName);

  if (fs.existsSync(projectFullPath)) {
    const { overwrite } = await inquirer.prompt({
        type: 'confirm',
        name: 'overwrite',
        message: chalk.yellow(`"${projectName}" –Ω—ç—Ä—Ç—ç–π —Ö–∞–≤—Ç–∞—Å –∞–ª—å —Ö—ç–¥–∏–π–Ω –±–∞–π–Ω–∞. –£—Å—Ç–≥–∞–∞–¥ —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö “Ø“Ø?`),
        default: false
    });
    if(!overwrite) {
        console.log(chalk.red('‚ùå “Æ–π–ª–¥—ç–ª —Ü—É—Ü–ª–∞–≥–¥–ª–∞–∞.'));
        process.exit(0);
    }
    fs.rmSync(projectFullPath, { recursive: true, force: true });
  }

  fs.mkdirSync(projectFullPath);
  console.log(chalk.green(`\n‚úÖ –¢”©—Å–ª–∏–π–Ω “Ø–Ω–¥—Å—ç–Ω —Ö–∞–≤—Ç–∞—Å “Ø“Ø—Å–ª—ç—ç: ${projectFullPath}`));

  const { createDefaults } = await inquirer.prompt({
      type: 'checkbox',
      name: 'createDefaults',
      message: '‚öôÔ∏è “Æ–Ω–¥—Å—ç–Ω —Ñ–∞–π–ª—É—É–¥–∞–∞—Å —Å–æ–Ω–≥–æ–∂ “Ø“Ø—Å–≥—ç–Ω—ç “Ø“Ø:',
      choices: [
          { name: 'index.html', checked: true },
          { name: 'README.md', checked: true },
          { name: 'css/style.css', checked: false },
          { name: 'js/main.js', checked: false }
      ]
  });

  if(createDefaults.includes('index.html')) {
      const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${projectName}</title>
  ${createDefaults.includes('css/style.css') ? '<link rel="stylesheet" href="css/style.css">' : ''}
</head>
<body>
  <h1>Welcome to ${projectName}</h1>
  ${createDefaults.includes('js/main.js') ? '<script src="js/main.js"></script>' : ''}
</body>
</html>`;
    fs.writeFileSync(path.join(projectFullPath, 'index.html'), htmlContent);
    console.log(chalk.green('‚úÖ `index.html` “Ø“Ø—Å–ª—ç—ç.'));
  }

  if(createDefaults.includes('README.md')) {
      fs.writeFileSync(path.join(projectFullPath, 'README.md'), `# ${projectName}`);
      console.log(chalk.green('‚úÖ `README.md` “Ø“Ø—Å–ª—ç—ç.'));
  }

  if(createDefaults.includes('css/style.css')) {
      fs.mkdirSync(path.join(projectFullPath, 'css'), { recursive: true });
      fs.writeFileSync(path.join(projectFullPath, 'css/style.css'), '/* Your styles here */');
      console.log(chalk.green('‚úÖ `css/style.css` “Ø“Ø—Å–ª—ç—ç.'));
  }

  if(createDefaults.includes('js/main.js')) {
      fs.mkdirSync(path.join(projectFullPath, 'js'), { recursive: true });
      fs.writeFileSync(path.join(projectFullPath, 'js/main.js'), '// Your scripts here');
      console.log(chalk.green('‚úÖ `js/main.js` “Ø“Ø—Å–ª—ç—ç.'));
  }

  const { continueWithCustom } = await inquirer.prompt({
      type: 'confirm',
      name: 'continueWithCustom',
      message: 'üîß –ù—ç–º—ç–ª—Ç—ç—ç—Ä —Ñ–∞–π–ª/—Ñ–æ–ª–¥–µ—Ä “Ø“Ø—Å–≥—ç—Ö “Ø“Ø?',
      default: true
  });

  if (continueWithCustom) {
      await askToAddFileOrFolder(projectFullPath);
  }

  console.log(chalk.blue.bold('\n‚ú® –¢”©—Å–ª–∏–π–Ω —ç—Ü—Å–∏–π–Ω –±“Ø—Ç—ç—Ü:'));
  const finalTree = tree(projectFullPath, { allFiles: true });
  console.log(finalTree);

  console.log(chalk.cyan.bold('\nüéâ Structra CLI –∞—à–∏–≥–ª–∞—Å–∞–Ω–¥ –±–∞—è—Ä–ª–∞–ª–∞–∞! –¢–∞–Ω—ã –∞–∂–∏–ª–¥ –∞–º–∂–∏–ª—Ç —Ö“Ø—Å—å–µ!\n'));
}

main().catch(handleError);